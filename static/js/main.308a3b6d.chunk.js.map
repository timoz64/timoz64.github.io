{"version":3,"sources":["ApiContext.js","components/TemperaturesCounter.js","components/Chart.js","components/Headline.js","components/NavItem.js","components/Navigation.js","App.js","index.js"],"names":["ApiContext","createContext","ApiProvider","props","useState","requestCount","setRequestCount","apiPath","apiEndPoint","temps","tempDescription","api","setApi","fetchUrl","fetch","then","response","json","data","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Provider","value","children","TemperatureCounter","useContext","length","numberOfTemps","avgTemps","reduce","prev","cur","temperature","avgHumidity","humidity","lastTemp","slice","currentTemp","Table","striped","bordered","hover","size","Math","floor","Chart","labels","chartData","setchartData","newLabels","map","datev","push","date_created","substring","newTemps","tempv","newHums","datasets","label","yAxisID","pointStyle","borderColor","borderDash","pointRadius","borderWidth","fill","className","headline","options","maintainAspectRatio","legend","display","position","fontColor","scales","yAxes","type","ticks","index","values","max","min","Headline","style","color","marginTop","NavItem","Nav","Link","onClick","endPoint","button_title","Navigation","Navbar","bg","variant","Brand","href","App","ReactDOM","render","StrictMode","Container","document","getElementById"],"mappings":"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","file":"static/js/main.308a3b6d.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, createContext } from 'react';\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\n\nexport const ApiContext = createContext();\n\nexport const ApiProvider = (props) => {\n    let [requestCount, setRequestCount] = useState(0);\n\n    const [api, setApi] = useState({\n        apiPath: 'https://th2e-backend.herokuapp.com/temperature/',\n        apiEndPoint: 'last_seven_days',\n        temps: [],\n        tempDescription: 'Last seven days'\n    });\n\n    function fetchUrl() {\n\n        fetch(api.apiPath + api.apiEndPoint).then(response =>\n            response.json().then(data => {\n                setApi({\n                    ...api,\n                    temps: data\n                })\n            }))\n    }\n\n    // Run every 5 minute\n    const delay = 60000 * 5;\n\n    useInterval(() => {\n        fetchUrl()\n        setRequestCount(requestCount + 1);\n    }, delay);\n\n    useEffect(() => {\n        fetchUrl()\n    }, [api.apiEndPoint]) // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <ApiContext.Provider value={[api, setApi]}>\n            {props.children}\n        </ApiContext.Provider>\n    )\n}\n\n","import React, { useContext } from 'react'\nimport { ApiContext } from '../ApiContext'\nimport Table from 'react-bootstrap/Table'\n\nexport default function TemperatureCounter() {\n\n    const [api] = useContext(ApiContext);\n    if (!api.temps || !api.temps.length) { return <div>No data for TemperatureCounter</div> }\n    const numberOfTemps = api.temps.length\n    const allTemps = api.temps.reduce(function (prev, cur) {\n        return prev + cur.temperature;\n    }, 0);\n    const allHumidity = api.temps.reduce(function (prev, cur) {\n        return prev + cur.humidity;\n    }, 0);\n    const avgTemps = allTemps / numberOfTemps;\n    const avgHumidity = allHumidity / numberOfTemps;\n    const lastTemp = api.temps.slice(-1)[0];\n    const currentTemp = { ...lastTemp }\n\n\n    return (\n        <Table striped bordered hover size=\"sm\">\n            <thead>\n                <tr>\n                    <th>Number of measurements</th>\n                    <th>Current temperature</th>\n                    <th>Current humidity</th>\n                    <th>Average temperature</th>\n                    <th>Average humidity</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>{numberOfTemps}</td>\n                    <td>{currentTemp.temperature}°C</td>\n                    <td>{currentTemp.humidity}%</td>\n                    <td>{Math.floor(avgTemps * 100) / 100}°C</td>\n                    <td>{Math.floor(avgHumidity * 100) / 100}%</td>\n                </tr>\n            </tbody>\n        </Table>\n    )\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { ApiContext } from '../ApiContext'\n\n\nconst Chart = (props) => {\n    const [api] = useContext(ApiContext);\n    const [chartData, setchartData] = useState({ labels: [] })\n\n    useEffect(() => {\n        let newLabels = []\n        api.temps.map(datev => {\n            return newLabels.push(datev.date_created.substring(0, 19))\n        })\n        //2020-02-19T14:47:38\n        let newTemps = []\n        api.temps.map(tempv => {\n            return newTemps.push(tempv.temperature)\n        })\n        let newHums = []\n        api.temps.map(tempv => {\n            return newHums.push(tempv.humidity)\n        })\n\n        setchartData({\n            labels: newLabels, datasets: [\n                {\n                    label: 'Temperatures',\n                    yAxisID: 'Temperatures',\n                    data: newTemps,\n                    pointStyle: 'line',\n                    borderColor: ['rgba(232, 22, 22, 0.7  )'],\n                    borderDash: [],\n                    pointRadius: 0,\n                    borderWidth: 3,\n                    fill: false\n                },\n                {\n                    label: 'Humidity',\n                    yAxisID: 'Humidity',\n                    data: newHums,\n                    pointStyle: 'line',\n                    borderColor: ['rgba(63, 191, 63, 0.7   )'],\n                    pointRadius: 0,\n                    borderWidth: 3,\n                    fill: false\n                }\n            ]\n        })\n\n    }, [api.temps])\n\n    if (!api.temps || !api.temps.length) { return <div>No data for Chart</div> }\n    return (\n\n        <div className=\"chart\">\n            <h3>{props.headline}</h3>\n            <Line\n                data={chartData}\n                options={{\n                    maintainAspectRatio: true,\n                    legend: {\n                        display: true,\n                        position: 'top',\n                        labels: {\n                            fontColor: \"#000080\",\n                        }\n                    },\n                    scales: {\n                        yAxes: [{\n                            id: 'Temperatures',\n                            type: 'linear',\n                            position: 'left',\n                            ticks: {\n                                callback: function (value, index, values) {\n                                    return value + ' C°';\n                                }\n                            }\n                        }, {\n                            id: 'Humidity',\n                            type: 'linear',\n                            position: 'right',\n                            ticks: {\n                                max: 100,\n                                min: 0,\n                                callback: function (value, index, values) {\n                                    return value + '%';\n                                }\n                            }\n                        }]\n                    }\n\n                }\n                }\n            />\n        </div>\n\n    )\n}\n\nexport default Chart;","import React, { useContext } from 'react';\nimport { ApiContext } from '../ApiContext'\n\n\nexport default function Headline() {\n    const [api] = useContext(ApiContext)\n    const headlineStyle = {\n        color: 'red',\n        marginTop: '2rem'\n    }\n    return (\n        <div>\n            <h3 style={headlineStyle}>Temperature and Humidity: {api.tempDescription}</h3>\n        </div>\n    )\n}\n","import React, { useContext } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { ApiContext } from '../ApiContext'\n\n\n\nconst NavItem = (props) => {\n    const [api, setApi] = useContext(ApiContext)\n\n    function changePath() {\n        setApi({\n            ...api,\n            apiEndPoint: props.endPoint,\n            tempDescription: props.button_title\n        })\n    }\n\n    return (\n        <Nav.Link onClick={changePath}>{props.button_title}</Nav.Link>\n    )\n}\nexport default NavItem;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavItem from './NavItem';\n\nexport default function Navigation(props) {\n\n    return (\n        <div>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#\">Measurements</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <NavItem button_title={'Last 7 days'} endPoint={'last_seven_days'} />\n                    <NavItem button_title={'Last 30 days'} endPoint={'last_thirty_days'} />\n                    <NavItem button_title={'This year'} endPoint={'this_year'} />\n                </Nav>\n            </Navbar>\n        </div>\n    )\n}\n","import React from 'react';\nimport TemperaturesCounter from './components/TemperaturesCounter';\nimport Chart from './components/Chart';\nimport Headline from './components/Headline'\nimport Navigation from './components/Navigation';\n\nfunction App(props) {\n\n\n  return (\n\n    <div className=\"App\">\n      <Navigation />\n      <Headline />\n      <TemperaturesCounter />\n      <Chart />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { ApiProvider } from './ApiContext';\nimport Container from 'react-bootstrap/Container';\n//  import * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApiProvider>\n      <Container>\n        <App />\n      </Container>\n    </ApiProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//  serviceWorker.unregister();\n"],"sourceRoot":""}